// Project Structure:
//
// ├── cmd
// │   └── main.go
// ├── internal
// │   ├── domain
// │   │   └── user.go
// │   ├── repository
// │   │   └── user_repository.go
// │   ├── usecase
// │   │   └── user_usecase.go
// │   └── delivery
// │       └── http
// │           └── user_handler.go
// ├── pkg
// │   ├── database
// │   │   └── mysql.go
// │   └── shutdown
// │       └── graceful.go
// └── config
//     └── config.go

// internal/domain/user.go
package domain

type User struct {
    ID    uint   `json:"id" gorm:"primaryKey"`
    Name  string `json:"name"`
    Email string `json:"email"`
}

type UserRepository interface {
    Create(user *User) error
    FindByID(id uint) (*User, error)
    // Add more methods as needed
}

type UserUseCase interface {
    Create(user *User) error
    GetByID(id uint) (*User, error)
    // Add more methods as needed
}

// internal/repository/user_repository.go
package repository

import (
    "your-project/internal/domain"
    "gorm.io/gorm"
)

type userRepository struct {
    db *gorm.DB
}

func NewUserRepository(db *gorm.DB) domain.UserRepository {
    return &userRepository{db}
}

func (r *userRepository) Create(user *domain.User) error {
    return r.db.Create(user).Error
}

func (r *userRepository) FindByID(id uint) (*domain.User, error) {
    var user domain.User
    err := r.db.First(&user, id).Error
    return &user, err
}

// internal/usecase/user_usecase.go
package usecase

import (
    "your-project/internal/domain"
)

type userUseCase struct {
    userRepo domain.UserRepository
}

func NewUserUseCase(userRepo domain.UserRepository) domain.UserUseCase {
    return &userUseCase{userRepo}
}

func (u *userUseCase) Create(user *domain.User) error {
    return u.userRepo.Create(user)
}

func (u *userUseCase) GetByID(id uint) (*domain.User, error) {
    return u.userRepo.FindByID(id)
}

// internal/delivery/http/user_handler.go
package http

import (
    "your-project/internal/domain"
    "github.com/gofiber/fiber/v2"
)

type UserHandler struct {
    userUseCase domain.UserUseCase
}

func NewUserHandler(app *fiber.App, userUseCase domain.UserUseCase) {
    handler := &UserHandler{
        userUseCase: userUseCase,
    }
    
    app.Post("/users", handler.CreateUser)
    app.Get("/users/:id", handler.GetUser)
}

func (h *UserHandler) CreateUser(c *fiber.Ctx) error {
    user := new(domain.User)
    if err := c.BodyParser(user); err != nil {
        return c.Status(400).JSON(fiber.Map{
            "error": err.Error(),
        })
    }
    
    err := h.userUseCase.Create(user)
    if err != nil {
        return c.Status(500).JSON(fiber.Map{
            "error": err.Error(),
        })
    }
    
    return c.Status(201).JSON(user)
}

func (h *UserHandler) GetUser(c *fiber.Ctx) error {
    id, err := c.ParamsInt("id")
    if err != nil {
        return c.Status(400).JSON(fiber.Map{
            "error": "Invalid ID",
        })
    }
    
    user, err := h.userUseCase.GetByID(uint(id))
    if err != nil {
        return c.Status(404).JSON(fiber.Map{
            "error": "User not found",
        })
    }
    
    return c.JSON(user)
}

// pkg/database/mysql.go
package database

import (
    "fmt"
    "gorm.io/driver/mysql"
    "gorm.io/gorm"
)

func NewMySQLConnection(dsn string) (*gorm.DB, error) {
    db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
    if err != nil {
        return nil, fmt.Errorf("failed to connect database: %w", err)
    }
    return db, nil
}

// pkg/shutdown/graceful.go
package shutdown

import (
    "fmt"
    "os"
    "os/signal"
    "syscall"
)

type GracefulShutdown struct {
    wait chan struct{}
}

func NewGracefulShutdown() *GracefulShutdown {
    return &GracefulShutdown{
        wait: make(chan struct{}, 1),
    }
}

func (g *GracefulShutdown) Execute(f func() error) {
    exit := make(chan os.Signal, 1)
    signal.Notify(exit, os.Interrupt, syscall.SIGTERM)

    go func() {
        defer func() {
            g.wait <- struct{}{}
        }()
        if err := f(); err != nil {
            fmt.Printf("Error during execution: %v\n", err)
        }
    }()

    select {
    case <-g.wait:
        return
    case <-exit:
        fmt.Println("Shutdown signal received...")
        <-g.wait
        fmt.Println("Graceful shutdown completed...")
    }
}

// cmd/main.go
package main

import (
    "log"
    "your-project/config"
    "your-project/internal/delivery/http"
    "your-project/internal/repository"
    "your-project/internal/usecase"
    "your-project/pkg/database"
    "your-project/pkg/shutdown"
    
    "github.com/gofiber/fiber/v2"
)

func main() {
    // Initialize database
    db, err := database.NewMySQLConnection("user:password@tcp(localhost:3306)/dbname?charset=utf8mb4&parseTime=True&loc=Local")
    if err != nil {
        log.Fatal(err)
    }

    // Initialize repositories
    userRepo := repository.NewUserRepository(db)

    // Initialize use cases
    userUseCase := usecase.NewUserUseCase(userRepo)

    // Initialize Fiber app
    app := fiber.New()

    // Initialize handlers
    http.NewUserHandler(app, userUseCase)

    // Initialize graceful shutdown
    shutdown := shutdown.NewGracefulShutdown()

    // Execute with graceful shutdown
    shutdown.Execute(func() error {
        return app.Listen(":8080")
    })
}